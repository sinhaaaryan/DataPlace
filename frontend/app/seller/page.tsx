"use client"
import Card from "@/components/home/card";
import { DEPLOY_URL } from "@/lib/constants";
import { Github, Twitter } from "@/components/shared/icons";
import WebVitals from "@/components/home/web-vitals";
import ComponentGrid from "@/components/home/component-grid";
import Image from "next/image";
import { nFormatter } from "@/lib/utils";
import axios from "axios";
import useLocalStorage from "@/lib/hooks/use-local-storage";
import {Dialog, DialogTrigger} from "@radix-ui/react-dialog";
import { useEffect, useState } from 'react';

import {DialogContent, DialogDescription, DialogHeader, DialogTitle} from "@/components/ui/dialog";
const { ethers } = require("ethers");
const abi = require("../../abi.json")['abi'];


export default function Home() {
  const [orders, setOrders] = useState([]);
  const [signer] = useState([]);

  useEffect(() => {
    async function fetchOrders() {
      console.log(abi);

      const marketplace = "0x71C95911E9a5D330f4D621842EC243EE1343292e";
      const provider = new ethers.JsonRpcProvider("http://localhost:8545");
      const instance = new ethers.Contract(marketplace, abi, provider);

      const orders = await instance.getOrders();
      console.log('orders', orders);
      setOrders(orders);
    }
    fetchOrders();
  }, []);


  // const orderList = async () => {
  //     console.log(abi);

  //     const marketplace = "0x71C95911E9a5D330f4D621842EC243EE1343292e";
  //     const provider = new ethers.JsonRpcProvider("http://localhost:8545");
  //     const instance = new ethers.Contract(marketplace, abi, provider);

  //     const orders = await instance.getOrders();

  //     console.log("orders", orders);

  //     return orders;
  //   };

  const orderFulfill = async (orderId) => {
    const storedData = [{"interval":["2023-08-22T00:00:00.000000+01:00","2023-08-23T00:00:00.000000+01:00"],"activity_seconds":23844,"inactivity_seconds":62256,"vigorous_intensity_seconds":60,"BMR_calories":1495,"net_activity_calories":716,"total_burned_calories":2211,"distance_meters":14075,"steps":19914,"avg_hr_bpm":88.8148148148,"max_hr_bpm":120,"min_hr_bpm":62,"resting_hr_bpm":57,"avg_saturation_percentage":96.8846153846,"activity_stress_duration_seconds":24060,"avg_stress_level":66,"high_stress_duration_seconds":9420,"low_stress_duration_seconds":6660,"max_stress_level":96,"medium_stress_duration_seconds":15180,"rest_stress_duration_seconds":60,"stress_duration_seconds":31260},{"interval":["2023-08-23T00:00:00.000000+01:00","2023-08-24T00:00:00.000000+01:00"],"activity_seconds":24663,"inactivity_seconds":61737,"vigorous_intensity_seconds":240,"BMR_calories":1495,"net_activity_calories":1134,"total_burned_calories":2629,"distance_meters":14617,"steps":20709,"avg_hr_bpm":84.2677916361,"max_hr_bpm":142,"min_hr_bpm":51,"resting_hr_bpm":54,"avg_saturation_percentage":92.3,"activity_stress_duration_seconds":33660,"avg_stress_level":37,"high_stress_duration_seconds":12120,"low_stress_duration_seconds":1140,"max_stress_level":97,"medium_stress_duration_seconds":6480,"rest_stress_duration_seconds":28200,"stress_duration_seconds":19740},{"interval":["2023-08-24T00:00:00.000000+01:00","2023-08-25T00:00:00.000000+01:00"],"activity_seconds":14203,"inactivity_seconds":72197,"vigorous_intensity_seconds":1020,"BMR_calories":1495,"net_activity_calories":780,"total_burned_calories":2275,"distance_meters":14143,"steps":18696,"avg_hr_bpm":91.1820448878,"max_hr_bpm":178,"min_hr_bpm":59,"resting_hr_bpm":58,"avg_saturation_percentage":92.7875,"activity_stress_duration_seconds":15420,"avg_stress_level":66,"high_stress_duration_seconds":11160,"low_stress_duration_seconds":6960,"max_stress_level":97,"medium_stress_duration_seconds":8700,"rest_stress_duration_seconds":300,"stress_duration_seconds":26820},{"interval":["2023-08-25T00:00:00.000000+01:00","2023-08-26T00:00:00.000000+01:00"],"activity_seconds":21439,"inactivity_seconds":64961,"vigorous_intensity_seconds":1140,"BMR_calories":1260,"net_activity_calories":928,"total_burned_calories":2423,"distance_meters":17176,"steps":22637,"avg_hr_bpm":78.5789839944,"max_hr_bpm":162,"min_hr_bpm":49,"resting_hr_bpm":51,"avg_saturation_percentage":92.9653379549,"activity_stress_duration_seconds":21060,"avg_stress_level":38,"high_stress_duration_seconds":9600,"low_stress_duration_seconds":6780,"max_stress_level":99,"medium_stress_duration_seconds":11100,"rest_stress_duration_seconds":28020,"stress_duration_seconds":27480},{"interval":["2023-08-26T00:00:00.000000+03:00","2023-08-27T00:00:00.000000+03:00"],"activity_seconds":360,"inactivity_seconds":15240,"vigorous_intensity_seconds":60,"BMR_calories":269,"net_activity_calories":240,"total_burned_calories":269,"distance_meters":8,"steps":12,"avg_hr_bpm":63.25,"max_hr_bpm":97,"min_hr_bpm":55,"resting_hr_bpm":57,"avg_saturation_percentage":93.1437007874,"activity_stress_duration_seconds":420,"avg_stress_level":19,"high_stress_duration_seconds":60,"low_stress_duration_seconds":2460,"max_stress_level":78,"medium_stress_duration_seconds":540,"rest_stress_duration_seconds":10200,"stress_duration_seconds":3060},{"interval":["2023-08-27T00:00:00.000000+03:00","2023-08-28T00:00:00.000000+03:00"],"activity_seconds":11899,"inactivity_seconds":74501,"vigorous_intensity_seconds":1080,"BMR_calories":840,"net_activity_calories":1495,"total_burned_calories":448,"distance_meters":1943,"steps":7413,"avg_hr_bpm":72.2126582278,"max_hr_bpm":179,"min_hr_bpm":47,"resting_hr_bpm":48,"avg_saturation_percentage":94.2,"activity_stress_duration_seconds":10680,"avg_stress_level":10680,"high_stress_duration_seconds":32,"low_stress_duration_seconds":7620,"max_stress_level":96,"medium_stress_duration_seconds":13260,"rest_stress_duration_seconds":27600,"stress_duration_seconds":26280}]

    console.log("storedData", storedData);
    // const publicKey = 111;
    // const N = 1909;

    const marketplace = "0x71C95911E9a5D330f4D621842EC243EE1343292e";
    const provider = new ethers.JsonRpcProvider("http://localhost:8545");
    const instance = new ethers.Contract(marketplace, abi, provider);

    const order =  await instance.orders(orderId);
    const publicKey = order[6];
    const n = order[7];

    console.log("order to fill", order);

    const jsonString = JSON.stringify(storedData);
    const uint8Array = new TextEncoder().encode(jsonString);

    let hexString = '';
    uint8Array.forEach(byte => {
      hexString += byte.toString(16).padStart(2, '0');
    });

    // const byteData = await ethers.HexString("");

    let byteData = "";
    console.log('bytes', byteData);

    // byteData = "0x5b";
    const encryptedData = await instance.encryptBytes(byteData, publicKey, n);

    console.log("encryptedData", encryptedData);

    console.log("signer", this.signer);
    const tx = await this.signer.data.sendTransaction({
      "to": marketplace,
      "value": 0
    });

    console.log("tx", tx);


  }
  const handleButtonClick = async () => {
    // retrieve the user_id from local storage

    const user_id = localStorage.getItem('user_id')!.replace(/['"]+/g, '')
    
    console.log("button clicked");
    console.log("Before calling getData",user_id!.replace(/['"]+/g, ''));

    try {
      const response = await axios.get("http://localhost:3000/api/getData", {
        params: { user_id }, // Pass the user_id as a parameter to the API request
      });
  
      const data = response.data; // Access the data from the response
  
      console.log("Data from getData", data);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  return (
    <>
    <div className="z-10 w-full max-w-xl px-5 xl:px-0">
      {/* <a
        href="https://twitter.com/steventey/status/1613928948915920896"
        target="_blank"
        rel="noreferrer"
        className="mx-auto mb-5 flex max-w-fit animate-fade-up items-center justify-center space-x-2 overflow-hidden rounded-full bg-blue-100 px-7 py-2 transition-colors hover:bg-blue-200"
      >
        <Twitter className="h-5 w-5 text-[#1d9bf0]" />
        <p className="text-sm font-semibold text-[#1d9bf0]">
          Introducing Precedent
        </p>
      </a> */}
      <h1
        className="animate-fade-up bg-gradient-to-br from-black to-stone-500 bg-clip-text text-center font-display text-4xl font-bold tracking-[-0.02em] text-transparent opacity-0 drop-shadow-sm [text-wrap:balance] md:text-7xl md:leading-[5rem]"
        style={{ animationDelay: "0.15s", animationFillMode: "forwards" }}
      >
        DataPlace
      </h1>
      <p
        className="mt-6 animate-fade-up text-center text-gray-500 opacity-0 [text-wrap:balance] md:text-xl"
        style={{ animationDelay: "0.25s", animationFillMode: "forwards" }}
      >
        A marketplace for your data
      </p>
      <div
        className="mx-auto mt-6 flex animate-fade-up items-center justify-center space-x-5 opacity-0"
        style={{ animationDelay: "0.3s", animationFillMode: "forwards" }}
      >

        <Dialog>
          <DialogTrigger className = "text-black">
            Data preferences
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Select your preferences</DialogTitle>
              <DialogDescription>
                Which data would you like to share?
              </DialogDescription>
              <div className="flex gap-2 item-center">
                <input type="checkbox" id="c1"/>
                <label htmlFor="c1"> Athlete Data</label>
                <input type="checkbox" id="c2"/>
                <label htmlFor="c2"> Sleep Data</label>
              </div>
            </DialogHeader>
          </DialogContent>


        </Dialog>
        {/* <a
          className="group flex max-w-fit items-center justify-center space-x-2 rounded-full border border-black bg-black px-5 py-2 text-sm text-white transition-colors hover:bg-white hover:text-black"
          href={DEPLOY_URL}
          target="_blank"
          rel="noopener noreferrer"
        >
          <svg
            className="h-4 w-4 group-hover:text-black"
            viewBox="0 0 24 24"
            fill="currentColor"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M12 4L20 20H4L12 4Z"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
          <p>Deploy to Vercel</p>
        </a> */}
        {/* <a
          className="flex max-w-fit items-center justify-center space-x-2 rounded-full border border-gray-300 bg-white px-5 py-2 text-sm text-gray-600 shadow-md transition-colors hover:border-gray-800"
          href="https://github.com/steven-tey/precedent"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Github />
          <p>
            <span className="hidden sm:inline-block">Star on</span> GitHub{" "}
            <span className="font-semibold">{nFormatter(stars)}</span>
          </p>
        </a> */}
      </div>
      <div>
      <tbody>
        {orders.map((order, index) => (
          <tr key={order}>
            <td>Data type: {order[5]} </td>

            <td>Price: {ethers.formatEther(order[4])}</td>

            <td><button onClick={() => orderFulfill(index)}>sell</button></td>

            {/* <td>{event.returnValues.someProperty}</td> Replace with your event's property */}
          </tr>
        ))}
      </tbody>
    </div>
    </div>
    {/* <div className="my-10 grid w-full max-w-screen-xl animate-fade-up grid-cols-1 gap-5 px-5 md:grid-cols-3 xl:px-0">
      {features.map(({ title, description, demo, large }) => (
        <Card
          key={title}
          title={title}
          description={description}
          demo={
            title === "Beautiful, reusable components" ? (
              <ComponentGrid />
            ) : (
              demo
            )
          }
          large={large}
        />
      ))}
    </div> */}

  </>
);
}
